// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDal is a mock of Dal interface.
type MockDal struct {
	ctrl     *gomock.Controller
	recorder *MockDalMockRecorder
}

// MockDalMockRecorder is the mock recorder for MockDal.
type MockDalMockRecorder struct {
	mock *MockDal
}

// NewMockDal creates a new mock instance.
func NewMockDal(ctrl *gomock.Controller) *MockDal {
	mock := &MockDal{ctrl: ctrl}
	mock.recorder = &MockDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDal) EXPECT() *MockDalMockRecorder {
	return m.recorder
}

// Rate mocks base method.
func (m *MockDal) Rate(CodeFrom, CodeTo string) (Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rate", CodeFrom, CodeTo)
	ret0, _ := ret[0].(Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rate indicates an expected call of Rate.
func (mr *MockDalMockRecorder) Rate(CodeFrom, CodeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rate", reflect.TypeOf((*MockDal)(nil).Rate), CodeFrom, CodeTo)
}

// SaveRate mocks base method.
func (m *MockDal) SaveRate(rate Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRate", rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockDalMockRecorder) SaveRate(rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockDal)(nil).SaveRate), rate)
}
